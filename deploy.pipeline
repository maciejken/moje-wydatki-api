pipeline {
  agent any
  parameters {
    booleanParam(name: "PROD_DEPLOY", defaultValue: false, description: "Deploy to production")
    string(name: "APP_VERSION", defaultValue: "latest")
    string(name: "ALLOWED_USERS")
    string(name: "API_PREFIX", defaultValue: "/api")
    string(name: "CURRENCY", defaultValue: "PLN")
    string(name: "LOCALE", defaultValue: "pl-PL")
    string(name: "JWT_EXPIRES_IN", defaultValue: "15 minutes")
    string(name: "ROOT_DIR", defaultValue: "/app")
  }
  environment {
    ALLOWED_USERS = "${params.ALLOWED_USERS}"
    API_PREFIX = "${params.API_PREFIX}"
    CURRENCY = "${params.CURRENCY}"
    DB_NAME = 'moje_wydatki'
    JWT_EXPIRES_IN = "${params.JWT_EXPIRES_IN}"
    LOCALE = "${params.LOCALE}"
    PROD_DEPLOY = "${params.PROD_DEPLOY}"
    ROOT_DIR = "${params.ROOT_DIR}"
  }
  stages {
    stage('deploy QA') {
      when { expression !PROD_DEPLOY }
      environment {
        DB_USER = credentials('postgres-db-user-qa')
        DB_PASSWORD = credentials('postgres-db-password-qa')
        DB_PATH = credentials('postgres-db-path-qa')
        DB_PORT = "5433"
      }
      steps {
        sh 'docker-compose -f docker-compose.qa.yml up -d'
      }
    }
    stage('deploy PROD') {
      when { expression PROD_DEPLOY }
      environment {
        DB_USER = credentials('postgres-db-user')
        DB_PASSWORD = credentials('postgres-db-password')
        DB_PATH = credentials('postgres-db-path')
        DB_PORT = "5432"
      }
      steps {
        sh 'docker-compose -f docker-compose.prod.yml up -d'
      }
    }
  }
  post {
    cleanup {
      cleanWs()
    }
  }
}